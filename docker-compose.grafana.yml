services:
  # ASP.NET Web API from ./dotnet running on port 5042
  dotnet:
    container_name: dotnet_api
    build:
      context: ./dotnet
    ports:
      - "8080:8080"
    environment:
      # Instruct the app to send OTLP telemetry to the collector.
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_SERVICE_NAME=dotnet-api
      - ArrivalsUrl=http://python:5000

  # Python/Flask API from ./python running on port 8080
  python:
    container_name: python_api
    build:
      context: ./python
    ports:
      - "5000:5000"
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_SERVICE_NAME=python-api

  # Minimal JavaScript UI from ./ui (e.g. served via a simple Nginx or Node static server)
  # ui:
  #   build:
  #     context: ./ui
  #   ports:
  #     - "80:80"
  #   depends_on:
  #     - dotnet
  #     - python

  # OpenTelemetry Collector to receive telemetry from the apps and export to backend systems.
  otel-collector:
    container_name: otel-collector
    image: otel/opentelemetry-collector-contrib:latest
    command: ["--config", "/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel/otel-collector-config.yaml:/etc/otel-collector-config.yaml:ro

  tempo:
    image: grafana/tempo:latest
    command: -config.file=/etc/tempo.yaml
    hostname: tempo
    container_name: tempo
    volumes:
      - ./tempo/tempo-config.yaml:/etc/tempo.yaml:ro
      - tempo-storage:/var/tempo
    depends_on:
      - memcached

  memcached:
    image: memcached:latest
    container_name: memcached
    environment:
      - MEMCACHED_MAX_MEMORY=64m # Set the maximum memory usage
      - MEMCACHED_THREADS=4 # Number of threads to use

  # Prometheus for scraping and storing metrics (access at http://localhost:9090)
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    command:
      - --web.enable-remote-write-receiver
      - --enable-feature=native-histograms
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./prometheus/:/etc/prometheus/:ro

  # Loki for log storage
  loki:
    image: grafana/loki:latest
    container_name: loki
    user: "0:0"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./loki/loki-config.yaml:/etc/loki/local-config.yaml:ro
      - loki-data:/tmp/loki

  # Grafana for visualizing metrics and logs (access at http://localhost:3000)
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus
      - loki
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning

volumes:
  prometheus_data:
  grafana-data:
  jaeger-data:
  loki-data:
  tempo-storage:
